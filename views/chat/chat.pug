extends ../layout

block content
    header.chat-header
        h2 <i class="fas fa-comments"></i> Web Chat
    
    main.chat-main
        div.chat-sidebar( style="min-height: 600px;" ) 



        div.chat-messages
            div.message


    div.chat-form-container
        p.play-typing &nbsp;
        div
            input#msg(type="text" placeholder="Enter Message" required autocomplete="off")
            button( class="btn send-message" )
                <i class="fas fa-paper-plane"></i> Send

block popup
    div.notification
        p.title
        p.message
    


    .script 
        script(src="/socket.io/socket.io.js")
        //- script(src="js/main.js")
    
    script.

        socket = io ( { query: { userId: "#{userId}" } });
        const chatMessages = document.querySelector('.chat-messages');


        socket.on('broadcast',(data) =>{
            let content = '';
            for(item of data.onlineUserList){
                if(item.user.id != "#{userId}" ){
                    if(item.isOnline == true){
                        content += '<li class="online-user-list" data-fullname="'+item.user.fullname+'" data-id="'+item.user.id+'" > <div class="online" ></div> <img src="https://www.w3schools.com/howto/img_avatar2.png" class="avatar"><span class="display-name">'+item.user.fullname+'</span></li>';
                    }else{
                        content += '<li class="online-user-list" data-fullname="'+item.user.fullname+'" data-id="'+item.user.id+'" > <div class="offline" ></div> <img src="https://www.w3schools.com/howto/img_avatar2.png" class="avatar"><span class="display-name">'+item.user.fullname+'</span></li>';
                    }
                    
                }
            }
            if(content){
                $("div.chat-sidebar").html(content);
            }else{
                $("div.chat-sidebar").html('All users is offline');
            } 
        });





        //-------------------------------------------------------
        let = toUserId = '';
        let = fullname = '';
        $(document).on("click","li.online-user-list",function() {
            toUserId = $(this).data("id");
            fullname = $(this).data("fullname");

            $(this).css('background-color', '#5cb85c');
            $(this).find('span').css('color', '#ffffff');

            const data = {
                user: "#{userId}",
                from: toUserId
            }
            socket.emit('loadPrivateChatHistory', data); 
        });
        //-------------------------///----------------------------








        socket.on('privateChatHistory',(data) =>{
            console.log(data);
            $('.chat-messages').html('');
            for(item of data.chatHistory){
                const div = document.createElement('div');
                    div.classList.add('message');
                    div.innerHTML=`<p class="meta">${item.from.fullname}<span> ${item.date}</span></p>
                    <p class ="text">
                        ${item.message}
                    </p>`;
                    document.querySelector('.chat-messages').appendChild(div);
            }
            chatMessages.scrollTop=chatMessages.scrollHeight;
        });



        socket.on('instantMessage',(data) =>{
            if(data.messageObject.from.id == toUserId){
                const div = document.createElement('div');
                    div.classList.add('message');
                    div.innerHTML=`<p class="meta">${data.messageObject.from.fullname}<span> ${data.messageObject.date}</span></p>
                    <p class ="text">
                        ${data.messageObject.message}
                    </p>`;
                    document.querySelector('.chat-messages').appendChild(div);
            }else{
                $('div.notification').find('p.title').text('New message from '+ data.messageObject.from.fullname);
                $('div.notification').find('p.message').text(data.messageObject.message);
                
                $('div.notification').show();
                setTimeout(function(){
                   $('div.notification').hide();
                  }, 4000);
            }
            chatMessages.scrollTop=chatMessages.scrollHeight;
        });


        socket.on('displaySentMessage',(data) =>{
            if(data.messageObject.to.id == toUserId){
                const div = document.createElement('div');
                    div.classList.add('message');
                    div.innerHTML=`<p class="meta">${data.messageObject.from.fullname}<span> ${data.messageObject.date}</span></p>
                    <p class ="text">
                        ${data.messageObject.message}
                    </p>`;
                    document.querySelector('.chat-messages').appendChild(div);
            }
            chatMessages.scrollTop=chatMessages.scrollHeight;
        });




        socket.on('PlayMessageTypeing',(data) =>{
            if(data.data.from.id == toUserId){
                $('p.play-typing').text(data.data.message);

                setTimeout(function() {
                    $('p.play-typing').html('&nbsp;');
                }, 2000);
            }
        });





        function sendMessage(){
            var mgs = $("input#msg").val();
            if(toUserId && mgs ){
                const messageObject = {
                    from: {id: "#{userId}", fullname: "#{fullname}" },
                    to:   {id: toUserId, fullname: fullname },
                    message: mgs
                }
                 $("input#msg").val('');
                socket.emit('sendMessage', messageObject);
            }
        }

        $(document).on("click","button.send-message",function() {
            sendMessage();
        });

        $('input#msg').keyup(function(e){
            if(e.keyCode == 13){
                sendMessage();
            }

            const data = {
                from: {id: "#{userId}", fullname: "#{fullname}" },
                to:   {id: toUserId, fullname: fullname },
                message: "#{fullname}"+' typring...'
            }
            socket.emit('messageTypeing', data);
        });
        


    
        
		    
